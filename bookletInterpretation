Answer to lines 418-422:
The general idea behind the recommendation system is to create a list of movies that have similarities in word frequency based on your favorite movie.

The process:
[1] First,The SQL code vectorizes based on lexemes technique text in column x and adds the output to a newly created column.
[2] This, already provides the ability to query your a certain movie based on a single word as a lexemes. For example, you can type fighting and it will return movies that contain the words (fight, fights, fighting etc)
[3] Afterwards, a new column with rank is created and a score is calculated via the postgres function ts_rank, which is a score based on word frequency that is based on the input of your favorite movie.
[5] Finally, you copy the out put of the ranks based on your movie together with the URL to a CSV file and order them from high to low.
[6] Since your entered movie has the highest similarities in terms of word frequency, this will appear in the top, which is follow by the next best match. 


Answer to lines 455-460:
I am self-thaught in SQL and Python, so I had quite a good understanding of the undertaken steps.
The answers to 455-460 is my answer to 418-422.

This file is pushed to GitHub